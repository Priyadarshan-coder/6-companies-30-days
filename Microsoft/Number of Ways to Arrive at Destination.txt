class Pair{
    int first;
    int second;
    public Pair(int first,int second)
    {
        this.first=first;
        this.second=second;
    }
}
class Solution {
    public int countPaths(int n, int[][] roads) {
        ArrayList<ArrayList<Pair>> adj=new ArrayList<>();
        int m=roads.length;
        int mod=(int)(1e9 + 7);
        for(int i=0;i<n;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<m;i++)
        {
            adj.get(roads[i][0]).add(new Pair(roads[i][1],roads[i][2]));
            adj.get(roads[i][1]).add(new Pair(roads[i][0],roads[i][2]));
        }
        PriorityQueue<Pair> pq=new PriorityQueue<Pair>((x,y)-> x.first - y.first);
         long ways[]=new  long[n];
        int dist[]=new int[n];
        for(int i=0;i<n;i++)
        {
            dist[i]=Integer.MAX_VALUE;
            ways[i]=0;
        }
        ways[0]=1;
        dist[0]=0;
        pq.add(new Pair(0,0));
        while(!pq.isEmpty())
        {
            Pair it =pq.peek();
            pq.remove();
            int dis=it.first;
            int node=it.second;
            for(Pair iter:adj.get(node))
            {
                int adjnode=iter.first;
                int edw=iter.second;
                if(edw+dis<dist[adjnode]){
                dist[adjnode]=edw+dis;
                pq.add(new Pair(dis+edw,adjnode));
                ways[adjnode]=ways[node];
                }
                else if(edw+dis==dist[adjnode])
                {
                    ways[adjnode]=(ways[node]+ways[adjnode])%mod;
                }
            }
        }
        return (int )ways[n-1]%mod;
    }
}